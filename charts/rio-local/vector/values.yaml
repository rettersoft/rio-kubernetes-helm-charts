vector:
  role: Agent
  haproxy:
    enabled: false # try this

  customConfig:
    data_dir: /vector-data-dir
    api:
     enabled: true
     address: 127.0.0.1:8686
     playground: false

    sources:
      k8s_logs:
        type: kubernetes_logs
        extra_label_selector: "rio=true"

    transforms:
      # The router transform directs events to different routes based on the presence
      # of a specific prefix in the message.
      user_code_router:
        type: route
        inputs: [ "k8s_logs" ]
        route:
          metadata: 'contains(string!(.message), "[user-code-log-metadata]")'
          payload: 'contains(string!(.message), "[user-code-log-payload]")'
          user_logs: 'contains(string!(.message), "[user-code-log-user-logs]")'
          rdk: 'contains(string!(.message), "[user-code-log-rdk]")'
        reroute_unmatched: true


      # Process events routed as metadata.
      user_code_metadata:
        type: remap
        inputs: [ "user_code_router.metadata" ]
        source: |
          # do i really need this ?
          # Keep the whole event as-is
          . = .
          
          .log_group = "user-code"
          .log_type = "metadata"
          # Remove the metadata prefix
          metadata_cleaned = replace!(.message, "[user-code-log-metadata] ", "")
          .message = metadata_cleaned
          
          # Parse the cleaned string as JSON, defaulting to an empty object if parsing fails.
          metadata_obj, err2 = parse_json(metadata_cleaned)
          if err2 != null {
            metadata_obj = {}
          }
          # Store parsed data under user_data.metadata.
          .metadata = metadata_obj
          # Optionally, clear the message.

      # Process events routed as payload.
      user_code_payload:
        type: remap
        inputs: [ "user_code_router.payload" ]
        source: |
          # Keep the whole event as-is
          . = .
          
          .log_group = "user-code"
          .log_type = "payload"
          
          # Split by commas and extract parts - faster than regex for simple patterns
          parts = split(string!(.message), " ", limit: 5)
          
          # Clean up the ULID part (second element)  
          # Extract just the ULID characters using more efficient string operations
          .metadata.traceId = slice!(parts[1], 1, -1)
          .metadata.spanId = slice!(parts[2], 1, -1)
          .metadata.requestId = slice!(parts[3], 1, -1)
          
          # Get the data part (third element)
          .message = parts[4]
          

      # Process .
      user_code_logs:
        type: remap
        inputs: [ "user_code_router.user_logs" ]
        source: |
          # do i really need this ?
          # Preserve the original event and enrich it
          . = .
          .log_group = "user-code"
          .log_type = "user-logs"
          
          # SAMPLE LOG ! 
          #[user-code-log-user-logs] [01JTAZT8CXT8VRB9QGMAE12939] [01JTAZT90XYXHZF4HMJQNHH8J8] [index.methodC] 

          # Split by commas and extract parts - faster than regex for simple patterns  
          parts = split(string!(.message), " ", limit: 6)
          
          # Clean up the ULID part (second element)  
          # Extract just the ULID characters using more efficient string operations  
          .metadata.traceId = slice!(parts[1], 1, -1)
          .metadata.spanId = slice!(parts[2], 1, -1)
          .metadata.requestId = slice!(parts[3], 1, -1)
          .metadata.handler = slice!(parts[4], 1, -1)
          
          # Get the data part (last element)  
          .message = parts[5]
          
          

      # Process events routed as payload.
      rdk:
        type: remap
        inputs: [ "user_code_router.rdk" ]
        source: |
          # Keep the whole event as-is
          . = .
          
          .log_group = "user-code"
          .log_type = "rdk"
          
          # Split by commas and extract parts - faster than regex for simple patterns  
          parts = split(string!(.message), " ", limit: 5)
          
          # Clean up the ULID part (second element)  
          # Extract just the ULID characters using more efficient string operations  
          .metadata.traceId = slice!(parts[1], 1, -1)
          .metadata.spanId = slice!(parts[2], 1, -1)
          .metadata.requestId = slice!(parts[3], 1, -1)
          
          
          # Get the data part (third element)  
          .message = parts[4]
      

      # Optionally, handle logs that do not match either prefix.
      user_code_default:
        type: remap
        inputs: [ "user_code_router._unmatched" ]
        source: |
          .log_group = "default"

    sinks:
      loki:
        type: "loki"
        inputs: [ "user_code_metadata", "user_code_payload", "user_code_default", "user_code_logs", "rdk" ]
        #endpoint: "http://loki-write.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        endpoint: "http://loki.monitoring:3100"
        remove_structured_metadata_fields: true
        remove_label_fields: true
        structured_metadata:
          metadata: '{{`{{ metadata }}`}}'
          log_group: '{{`{{ log_group }}`}}'
          log_type: '{{`{{ log_type }}`}}'
          # TODO buraya zamanında {{kubernetes}} eklediğimde  field.kubernetes'in hepsi label'a geçti
          # TODO metadatada için aynısını yaparsak aşağıdakilere gerek kalmaz ? dene !!!!
        labels:
          job: "vector"
          namespace: '{{`{{ kubernetes.pod_namespace }}`}}'
          pod: '{{`{{ kubernetes.pod_name }}`}}'
          container_name: '{{`{{ kubernetes.container_name }}`}}'
          node_name: '{{`{{ kubernetes.pod_node_name }}`}}'
          app: '{{`{{ kubernetes.pod_labels.app }}`}}'
          log_group: '{{`{{ log_group }}`}}'
          log_type: '{{`{{ log_type }}`}}'
          projectId: '{{`{{ metadata.projectId }}`}}'
          classId: '{{`{{ metadata.classId }}`}}'
          instanceId: '{{`{{ metadata.instanceId }}`}}'
          methodName: '{{`{{ metadata.methodName }}`}}'
          userId: '{{`{{ metadata.userId }}`}}'
          identity: '{{`{{ metadata.identity }}`}}'
          requestId: '{{`{{ metadata.requestId }}`}}'
          traceId: '{{`{{ metadata.traceId }}`}}'
          spanId: '{{`{{ metadata.spanId }}`}}'
          requestTime: '{{`{{ metadata.requestTime }}`}}'
          responseTime: '{{`{{ metadata.responseTime }}`}}'
          statusCode: '{{`{{ metadata.statusCode }}`}}'
          handler: '{{`{{ metadata.handler }}`}}'
        encoding:
          codec: "json"

  service:
    ports:
      - name: api
        port: 8686
        targetPort: 8686

  serviceAccount:
    name: loki-promtail