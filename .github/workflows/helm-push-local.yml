name: Release rio-local Helm Charts

on:
  workflow_run:
    workflows: ["Release rio-project Helm Charts"]
    types:
      - completed
    branches: [ main, github-actions ]

permissions:
  contents: write
  actions: read

jobs:
  detect-charts:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.find-charts.outputs.charts }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Commit version bump
        uses: EndBug/add-and-commit@v9
        with:
          add: 'charts/rio-local/*/Chart.yaml'
          message: "chore: bump all rio-local charts to ${{ steps.read_version.outputs.VERSION }}"
          fetch: '--tags --force'


      - id: find-charts
        name: Detect rio-local charts
        run: |
          CHARTS=$(find charts/rio-local -type f -name Chart.yaml \
            -exec dirname {} \; \
            | sed 's|charts/rio-local/||' \
            | jq -R -s -c 'split("\n")[:-1]')
          # Default to empty array if none found
          echo "charts=${CHARTS:-[]}" >> $GITHUB_OUTPUT

  

  publish:
    needs: detect-charts
    runs-on: ubuntu-latest

    env:
      HARBOR_BASE_URL: https://k8-harbor.retter.io
      HARBOR_PROJECT: rio-kubernetes-charts
      HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
      HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}

    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-charts.outputs.charts) }}
      fail-fast: false
      max-parallel: 25

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4.3.0

      - name: Login to Harbor
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" \
            | helm registry login k8-harbor.retter.io \
              --username "${{ secrets.HARBOR_USERNAME }}" \
              --password-stdin

      - name: Read version file
        id: read_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Delete existing chart version if it exists
        id: delete_old
        run: |
          set -e
          export VERSION="${{ steps.read_version.outputs.VERSION }}"
          
          # Construct URL to list artifacts for the chart
          LIST_URL="${HARBOR_BASE_URL}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${{ matrix.chart }}/artifacts?page=1&page_size=1&with_tag=true"
          
          # Retrieve full digest of existing artifact (if any) with tag == VERSION
          EXISTING_DIGEST=$(curl -s -u "${HARBOR_USERNAME}:${HARBOR_PASSWORD}" \
            -H "Accept: application/json" \
            "${LIST_URL}" \
            | jq -r --arg TAG "${VERSION}" '
                .[] 
                | select(.tags[].name == $TAG) 
                | .digest
              ')
          
          if [[ -n "${EXISTING_DIGEST}" && "${EXISTING_DIGEST}" != "null" ]]; then
            echo "Found existing digest: ${EXISTING_DIGEST} for version ${VERSION}"
          
            # Delete the old artifact by digest
            curl -s -u "${HARBOR_USERNAME}:${HARBOR_PASSWORD}" \
              -X DELETE \
              "${HARBOR_BASE_URL}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${{ matrix.chart }}/artifacts/${EXISTING_DIGEST}"
          
            echo "Deleted old artifact ${EXISTING_DIGEST}"
          else
            echo "No existing artifact with tag ${VERSION} found; skipping delete."
          fi
        shell: bash


      - name: Package & Push chart ${{ matrix.chart }}
        working-directory: charts/rio-local/${{ matrix.chart }}
        run: |
          helm dependency update . || true
          helm package . --version ${{ steps.read_version.outputs.VERSION }}
          helm push *.tgz oci://k8-harbor.retter.io/rio-kubernetes-charts
